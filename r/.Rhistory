# Plot each ACF
for (param in colnames(mcmc_obj)) {
acf(mcmc_obj[, param],
main = paste("ACF for", param),
lag.max = 50)
}
# Reset layout if needed
par(mfrow = c(1, 1))
par(mar = c(3, 3, 3, 3))
# Determine number of parameters
num_params <- ncol(mcmc_obj)
# Set up grid
ncol_grid <- 3
nrow_grid <- ceiling(num_params / ncol_grid)
par(mfrow = c(nrow_grid, ncol_grid))
# Plot each ACF
for (param in colnames(mcmc_obj)) {
acf(mcmc_obj[, param],
main = paste("ACF for", param),
lag.max = 50)
}
# Reset layout if needed
par(mfrow = c(1, 1))
library(ROCR)
logistic <- function(z) {
1 / (1 + exp(-z))
}
pred_matrix <- logistic(X %*% t(posterior_samples))
pred_probs <- rowMeans(pred_matrix)
head(pred_probs)
pred_obj <- prediction(pred_probs, y)
perf <- performance(pred_obj, measure = "tpr", x.measure = "fpr")
plot(perf, col = "blue", main = "ROC Curve")
abline(a=0, b=1, lty=2, col="gray")  # Reference line
# Calculate AUC
auc <- performance(pred_obj, measure = "auc")
auc_value <- auc@y.values[[1]]
print(paste("AUC:", round(auc_value, 3)))
threshold <- 0.5
pred_class <- ifelse(pred_probs > threshold, 1, 0)
# Confusion Matrix
confusion_matrix <- table(Predicted = pred_class, Actual = y)
print(confusion_matrix)
observed_default_rate <- mean(y)
predicted_default_rate <- mean(pred_probs)
cat("Observed default rate:", round(observed_default_rate, 3), "\n")
cat("Predicted default rate:", round(predicted_default_rate, 3), "\n")
X <- model.matrix(~ credit_score + person+income + loan_amnt + loan_intent +  + loan_percent_income + "cb_person_cred_hist_length",
data = loan_data)
X <- model.matrix(~ credit_score + person+income + loan_amnt + loan_intent +  + loan_percent_income + cb_person_cred_hist_length,
data = loan_data)
X <- model.matrix(~ credit_score + person_income + loan_amnt + loan_intent +  + loan_percent_income + cb_person_cred_hist_length,
data = loan_data)
colnames(X)[colnames(X) == "previous_loan_defaults_on_fileYes"] <- "defaults"
colnames(X)[colnames(X) == "loan_intentEDUCATION"] <- "intentEDUCATION"
colnames(X)[colnames(X) == "loan_intentHOMEIMPROVEMENT"] <- "intentHOMEIMPROVEMENT"
colnames(X)[colnames(X) == "loan_intentMEDICAL"] <- "intentMEDICAL"
colnames(X)[colnames(X) == "loan_intentPERSONAL"] <- "intentPERSONAL"
colnames(X)[colnames(X) == "loan_intentVENTURE"] <- "intentVENTURE"
dim(X)
length(y)
head(X)
log_prior <- function(betas, income_prior_mean = 2, income_prior_sd = 1,
credit_prior_mean = 2, credit_prior_sd = 1, other_prior_sd = 5) {
# Ensure betas is a named vector
if(!"loan_percent_income" %in% names(betas)) {
stop("The loan_percent_income coefficient is not found in betas.")
}
if (!("credit_score" %in% names(betas))) {
stop("The credit_score coefficient is not found in betas.")
}
# Strong prior for loan_percent_income
lp_loan_percent <- dnorm(betas["loan_percent_income"],
mean = income_prior_mean,
sd = income_prior_sd,
log = TRUE)
lp_credit <- dnorm(betas["credit_score"],
mean = credit_prior_mean,
sd = credit_prior_sd,
log = TRUE)
# Weak priors for the other coefficients (including the intercept and other predictors)
other_names <- names(betas)[!(names(betas) %in% c("loan_percent_income", "credit_score"))]
lp_others <- sum(dnorm(betas[other_names], mean = 0, sd = other_prior_sd, log = TRUE))
lp_loan+percent + lp_credit + lp_others
}
log_lik <- function(betas, X, y) {
z <- X %*% betas  # linear predictor
p <- logistic(z)
eps <- 1e-9  # small constant to prevent log(0)
sum(y * log(p + eps) + (1 - y) * log(1 - p + eps))
}
log_posterior <- function(betas, X, y, income_prior_mean = 2, income_prior_sd = 1, other_prior_sd = 5) {
log_lik(betas, X, y) + log_prior(betas, income_prior_mean, income_prior_sd, other_prior_sd)
}
run_mcmc <- function(X, y, n_iter = 10000, income_prior_mean = 2, income_prior_sd = 1, other_prior_sd = 5, prop_sd = 0.01) {
p <- ncol(X)
betas <- rep(0, p)
names(betas) <- colnames(X)
chain <- matrix(NA, nrow = n_iter, ncol = p)
colnames(chain) <- colnames(X)
curr_lp <- log_posterior(betas, X, y, income_prior_mean, income_prior_sd, other_prior_sd)
for (i in seq_len(n_iter)) {
betas_star <- betas + rnorm(p, mean = 0, sd = prop_sd)
new_lp <- log_posterior(betas_star, X, y, income_prior_mean, income_prior_sd, other_prior_sd)
r_ratio <- exp(new_lp - curr_lp)
if (runif(1) < r_ratio) {
betas <- betas_star
curr_lp <- new_lp
}
chain[i, ] <- betas
}
chain
}
# Run the MCMC sampler
mcmc_chain <- run_mcmc(X, y, n_iter = 10000, income_prior_mean = 2, income_prior_sd = 1, other_prior_sd = 5, prop_sd = 0.01)
log_prior <- function(betas, income_prior_mean = 2, income_prior_sd = 1,
credit_prior_mean = 2, credit_prior_sd = 1, other_prior_sd = 5) {
# Ensure betas is a named vector
if(!"loan_percent_income" %in% names(betas)) {
stop("The loan_percent_income coefficient is not found in betas.")
}
if (!("credit_score" %in% names(betas))) {
stop("The credit_score coefficient is not found in betas.")
}
# Strong prior for loan_percent_income
lp_loan_percent <- dnorm(betas["loan_percent_income"],
mean = income_prior_mean,
sd = income_prior_sd,
log = TRUE)
lp_credit <- dnorm(betas["credit_score"],
mean = credit_prior_mean,
sd = credit_prior_sd,
log = TRUE)
# Weak priors for the other coefficients (including the intercept and other predictors)
other_names <- names(betas)[!(names(betas) %in% c("loan_percent_income", "credit_score"))]
lp_others <- sum(dnorm(betas[other_names], mean = 0, sd = other_prior_sd, log = TRUE))
lp_loan_percent + lp_credit + lp_others
}
log_lik <- function(betas, X, y) {
z <- X %*% betas  # linear predictor
p <- logistic(z)
eps <- 1e-9  # small constant to prevent log(0)
sum(y * log(p + eps) + (1 - y) * log(1 - p + eps))
}
log_posterior <- function(betas, X, y, income_prior_mean = 2, income_prior_sd = 1, other_prior_sd = 5) {
log_lik(betas, X, y) + log_prior(betas, income_prior_mean, income_prior_sd, other_prior_sd)
}
run_mcmc <- function(X, y, n_iter = 10000, income_prior_mean = 2, income_prior_sd = 1, other_prior_sd = 5, prop_sd = 0.01) {
p <- ncol(X)
betas <- rep(0, p)
names(betas) <- colnames(X)
chain <- matrix(NA, nrow = n_iter, ncol = p)
colnames(chain) <- colnames(X)
curr_lp <- log_posterior(betas, X, y, income_prior_mean, income_prior_sd, other_prior_sd)
for (i in seq_len(n_iter)) {
betas_star <- betas + rnorm(p, mean = 0, sd = prop_sd)
new_lp <- log_posterior(betas_star, X, y, income_prior_mean, income_prior_sd, other_prior_sd)
r_ratio <- exp(new_lp - curr_lp)
if (runif(1) < r_ratio) {
betas <- betas_star
curr_lp <- new_lp
}
chain[i, ] <- betas
}
chain
}
# Run the MCMC sampler
mcmc_chain <- run_mcmc(X, y, n_iter = 10000, income_prior_mean = 2, income_prior_sd = 1, other_prior_sd = 5, prop_sd = 0.01)
# Discard burn-in
burn_in <- 2000
posterior_samples <- mcmc_chain[(burn_in + 1):nrow(mcmc_chain), ]
# Assign column names for clarity
colnames(posterior_samples) <- colnames(X)
# Check posterior means for each parameter
colMeans(posterior_samples)
mcmc_obj <- as.mcmc(posterior_samples)
param_names <- colnames(mcmc_obj)
n_params <- length(param_names)
# Set up a layout: for example, 2 columns and enough rows
par(mfrow = c(ceiling(n_params/2), 2))
for(i in seq_along(param_names)) {
plot(mcmc_obj[, i], type = "l",
main = paste("Traceplot for", param_names[i]),
xlab = "Iteration", ylab = "Value")
}
# Determine number of parameters
num_params <- ncol(mcmc_obj)
# Set up grid
ncol_grid <- 3
nrow_grid <- ceiling(num_params / ncol_grid)
par(mfrow = c(nrow_grid, ncol_grid))
# Plot each ACF
for (param in colnames(mcmc_obj)) {
acf(mcmc_obj[, param],
main = paste("ACF for", param),
lag.max = 50)
}
par(mar = c(3, 3, 3, 3))
num_params <- ncol(mcmc_obj)
# Set up grid
ncol_grid <- 3
nrow_grid <- ceiling(num_params / ncol_grid)
par(mfrow = c(nrow_grid, ncol_grid))
# Plot each ACF
for (param in colnames(mcmc_obj)) {
acf(mcmc_obj[, param],
main = paste("ACF for", param),
lag.max = 50)
}
# Reset layout if needed
par(mfrow = c(1, 1))
logistic <- function(z) {
1 / (1 + exp(-z))
}
pred_matrix <- logistic(X %*% t(posterior_samples))
pred_probs <- rowMeans(pred_matrix)
head(pred_probs)
pred_obj <- prediction(pred_probs, y)
perf <- performance(pred_obj, measure = "tpr", x.measure = "fpr")
plot(perf, col = "blue", main = "ROC Curve")
abline(a=0, b=1, lty=2, col="gray")  # Reference line
# Calculate AUC
auc <- performance(pred_obj, measure = "auc")
auc_value <- auc@y.values[[1]]
print(paste("AUC:", round(auc_value, 3)))
threshold <- 0.5
pred_class <- ifelse(pred_probs > threshold, 1, 0)
# Confusion Matrix
confusion_matrix <- table(Predicted = pred_class, Actual = y)
print(confusion_matrix)
observed_default_rate <- mean(y)
predicted_default_rate <- mean(pred_probs)
cat("Observed default rate:", round(observed_default_rate, 3), "\n")
cat("Predicted default rate:", round(predicted_default_rate, 3), "\n")
log_prior <- function(betas,
income_prior_mean = 2, income_prior_sd = 1,
credit_prior_mean = -2, credit_prior_sd = 1,
other_prior_sd = 5) {
# Ensure the required coefficients are present
if (!("loan_percent_income" %in% names(betas))) {
stop("The loan_percent_income coefficient is not found in betas.")
}
if (!("credit_score" %in% names(betas))) {
stop("The credit_score coefficient is not found in betas.")
}
# Strong prior for loan_percent_income
lp_loan_percent <- dnorm(betas["loan_percent_income"],
mean = income_prior_mean,
sd = income_prior_sd,
log = TRUE)
# Strong prior for credit_score (note: negative mean reflects that higher scores reduce default risk)
lp_credit <- dnorm(betas["credit_score"],
mean = credit_prior_mean,
sd = credit_prior_sd,
log = TRUE)
# Weak priors for all other coefficients (e.g., intercept, person_income, loan_amnt, defaults)
other_names <- names(betas)[!(names(betas) %in% c("loan_percent_income", "credit_score"))]
lp_others <- sum(dnorm(betas[other_names], mean = 0, sd = other_prior_sd, log = TRUE))
lp_loan_percent + lp_credit + lp_others
}
# Log-likelihood for logistic regression
log_lik <- function(betas, X, y) {
z <- X %*% betas  # linear predictor
p <- logistic(z)
eps <- 1e-9  # tiny constant to avoid log(0)
sum(y * log(p + eps) + (1 - y) * log(1 - p + eps))
}
# Log-posterior: likelihood + prior
log_posterior <- function(betas, X, y,
income_prior_mean = 2, income_prior_sd = 1,
credit_prior_mean = -2, credit_prior_sd = 1,
other_prior_sd = 5) {
log_lik(betas, X, y) +
log_prior(betas, income_prior_mean, income_prior_sd,
credit_prior_mean, credit_prior_sd, other_prior_sd)
}
run_mcmc <- function(X, y, n_iter = 10000,
income_prior_mean = 2, income_prior_sd = 1,
credit_prior_mean = -2, credit_prior_sd = 1,
other_prior_sd = 5,
prop_sd = 0.01) {
p <- ncol(X)
betas <- rep(0, p)
names(betas) <- colnames(X)  # Ensure betas is a named vector
chain <- matrix(NA, nrow = n_iter, ncol = p)
colnames(chain) <- colnames(X)
# Compute initial log-posterior
curr_lp <- log_posterior(betas, X, y,
income_prior_mean, income_prior_sd,
credit_prior_mean, credit_prior_sd,
other_prior_sd)
for (i in seq_len(n_iter)) {
betas_star <- betas + rnorm(p, mean = 0, sd = prop_sd)
names(betas_star) <- colnames(X)  # Retain names for proposed vector
new_lp <- log_posterior(betas_star, X, y,
income_prior_mean, income_prior_sd,
credit_prior_mean, credit_prior_sd,
other_prior_sd)
r_ratio <- exp(new_lp - curr_lp)
if (runif(1) < r_ratio) {
betas <- betas_star
curr_lp <- new_lp
}
chain[i, ] <- betas
}
chain
}
mcmc_chain <- run_mcmc(X, y, n_iter = 10000,
income_prior_mean = 2, income_prior_sd = 1,
credit_prior_mean = -2, credit_prior_sd = 1,
other_prior_sd = 5, prop_sd = 0.01)
# Discard burn-in
burn_in <- 2000
posterior_samples <- mcmc_chain[(burn_in + 1):nrow(mcmc_chain), ]
colnames(posterior_samples) <- colnames(X)
# Display posterior means for each parameter
colMeans(posterior_samples)
mcmc_obj <- as.mcmc(posterior_samples)
param_names <- colnames(mcmc_obj)
n_params <- length(param_names)
# Set up a layout: for example, 2 columns and enough rows
par(mfrow = c(ceiling(n_params/2), 2))
for(i in seq_along(param_names)) {
plot(mcmc_obj[, i], type = "l",
main = paste("Traceplot for", param_names[i]),
xlab = "Iteration", ylab = "Value")
}
par(mar = c(3, 3, 3, 3))
num_params <- ncol(mcmc_obj)
# Set up grid
ncol_grid <- 3
nrow_grid <- ceiling(num_params / ncol_grid)
par(mfrow = c(nrow_grid, ncol_grid))
# Plot each ACF
for (param in colnames(mcmc_obj)) {
acf(mcmc_obj[, param],
main = paste("ACF for", param),
lag.max = 50)
}
# Reset layout if needed
par(mfrow = c(1, 1))
logistic <- function(z) {
1 / (1 + exp(-z))
}
pred_matrix <- logistic(X %*% t(posterior_samples))
pred_probs <- rowMeans(pred_matrix)
head(pred_probs)
pred_obj <- prediction(pred_probs, y)
perf <- performance(pred_obj, measure = "tpr", x.measure = "fpr")
plot(perf, col = "blue", main = "ROC Curve")
abline(a=0, b=1, lty=2, col="gray")  # Reference line
# Calculate AUC
auc <- performance(pred_obj, measure = "auc")
auc_value <- auc@y.values[[1]]
print(paste("AUC:", round(auc_value, 3)))
threshold <- 0.5
pred_class <- ifelse(pred_probs > threshold, 1, 0)
# Confusion Matrix
confusion_matrix <- table(Predicted = pred_class, Actual = y)
print(confusion_matrix)
observed_default_rate <- mean(y)
predicted_default_rate <- mean(pred_probs)
cat("Observed default rate:", round(observed_default_rate, 3), "\n")
cat("Predicted default rate:", round(predicted_default_rate, 3), "\n")
loan_data <- read.csv("../loan_data.csv", stringsAsFactors = FALSE)
numeric_cols <- c("credit_score", "person_income", "loan_amnt", "loan_percent_income", "cb_person_cred_hist_length")
loan_data[ , numeric_cols] <- scale(loan_data[ , numeric_cols])
y_all <- loan_data$loan_status
X_all <- model.matrix(~ credit_score + person_income + loan_amnt + loan_intent + loan_percent_income + cb_person_cred_hist_length,
data = loan_data)
colnames(X_all)[colnames(X_all) == "loan_intentEDUCATION"] <- "intentEDUCATION"
colnames(X_all)[colnames(X_all) == "loan_intentHOMEIMPROVEMENT"] <- "intentHOMEIMPROVEMENT"
colnames(X_all)[colnames(X_all) == "loan_intentMEDICAL"] <- "intentMEDICAL"
colnames(X_all)[colnames(X_all) == "loan_intentPERSONAL"] <- "intentPERSONAL"
colnames(X_all)[colnames(X_all) == "loan_intentVENTURE"] <- "intentVENTURE"
logistic <- function(z) 1 / (1 + exp(-z))
log_lik <- function(betas, X, y) {
z <- X %*% betas
p <- logistic(z)
eps <- 1e-9
sum(y * log(p + eps) + (1 - y) * log(1 - p + eps))
}
log_prior_weak <- function(betas, prior_sd = 5) {
sum(dnorm(betas, 0, prior_sd, log = TRUE))
}
log_prior_strong <- function(betas,
income_prior_mean = 4, income_prior_sd = 1,
credit_prior_mean = -4, credit_prior_sd = 1,
other_prior_sd = 5) {
if (!("loan_percent_income" %in% names(betas))) stop("loan_percent_income not found")
if (!("credit_score" %in% names(betas))) stop("credit_score not found")
lp_loan <- dnorm(betas["loan_percent_income"], income_prior_mean, income_prior_sd, log = TRUE)
lp_credit <- dnorm(betas["credit_score"], credit_prior_mean, credit_prior_sd, log = TRUE)
other_names <- setdiff(names(betas), c("loan_percent_income", "credit_score"))
lp_others <- sum(dnorm(betas[other_names], 0, other_prior_sd, log = TRUE))
lp_loan + lp_credit + lp_others
}
log_post <- function(betas, X, y, prior_fn, ...) {
log_lik(betas, X, y) + prior_fn(betas, ...)
}
run_mcmc <- function(X, y, n_iter = 5000, prop_sd = 0.01, prior_fn, ...) {
p <- ncol(X)
betas <- rep(0, p); names(betas) <- colnames(X)
chain <- matrix(NA, nrow = n_iter, ncol = p)
colnames(chain) <- colnames(X)
curr_lp <- log_post(betas, X, y, prior_fn, ...)
for (i in 1:n_iter) {
b_star <- betas + rnorm(p, 0, prop_sd); names(b_star) <- colnames(X)
new_lp <- log_post(b_star, X, y, prior_fn, ...)
r <- exp(new_lp - curr_lp)
if (runif(1) < r) {
betas <- b_star; curr_lp <- new_lp
}
chain[i, ] <- betas
}
chain
}
set.seed(123)
n <- nrow(X_all)
idx <- sample(seq_len(n), 0.8 * n)
X_train <- X_all[idx, ]
y_train <- y_all[idx]
X_test <- X_all[-idx, ]
y_test <- y_all[-idx]
mcmc_weak_train <- run_mcmc(X_train, y_train, n_iter = 5000, prop_sd = 0.01, prior_fn = log_prior_weak, prior_sd = 5)
burn <- 500
post_weak_train <- mcmc_weak_train[(burn + 1):5000, ]
colnames(post_weak_train) <- colnames(X_train)
mcmc_strong_train <- run_mcmc(X_train, y_train, n_iter = 5000, prop_sd = 0.01, prior_fn = log_prior_strong,
income_prior_mean = 2, income_prior_sd = 1, credit_prior_mean = -2, credit_prior_sd = 1, other_prior_sd = 5)
post_strong_train <- mcmc_strong_train[(burn + 1):5000, ]
colnames(post_strong_train) <- colnames(X_train)
test_pred_weak_mat <- logistic(X_test %*% t(post_weak_train))
test_pred_weak <- rowMeans(test_pred_weak_mat)
test_pred_strong_mat <- logistic(X_test %*% t(post_strong_train))
test_pred_strong <- rowMeans(test_pred_strong_mat)
if (!require(ROCR)) install.packages("ROCR", repos = "http://cran.us.r-project.org")
library(ROCR)
pobj_weak <- prediction(test_pred_weak, y_test)
pweak_perf <- performance(pobj_weak, "tpr", "fpr")
plot(pweak_perf, col = "blue", main = "Weak - Test ROC")
abline(a = 0, b = 1, lty = 2, col = "gray")
auc_weak_test <- performance(pobj_weak, "auc")@y.values[[1]]
pobj_strong <- prediction(test_pred_strong, y_test)
pstrong_perf <- performance(pobj_strong, "tpr", "fpr")
plot(pstrong_perf, col = "red", main = "Strong - Test ROC")
abline(a = 0, b = 1, lty = 2, col = "gray")
auc_strong_test <- performance(pobj_strong, "auc")@y.values[[1]]
cat("Weak test AUC:", round(auc_weak_test, 3), "\n")
cat("Strong test AUC:", round(auc_strong_test, 3), "\n")
cutoff <- 0.5
pred_weak_class <- ifelse(test_pred_weak > cutoff, 1, 0)
pred_strong_class <- ifelse(test_pred_strong > cutoff, 1, 0)
cat("Conf Mat - Weak:\n")
print(table(Predicted = pred_weak_class, Actual = y_test))
cat("Conf Mat - Strong:\n")
print(table(Predicted = pred_strong_class, Actual = y_test))
k <- 5
fold_idx <- sample(rep(1:k, length.out = nrow(X_all)))
# Vectors to store AUC results
auc_weak_cv   <- numeric(k)
auc_strong_cv <- numeric(k)
burn_cv <- 500
n_iter_cv <- 5000
cat("\nPerforming k-fold cross validation:\n")
for (f in seq_len(k)) {
# Split into train/test for this fold
X_train_cv <- X_all[fold_idx != f, ]
y_train_cv <- y_all[fold_idx != f]
X_test_cv  <- X_all[fold_idx == f, ]
y_test_cv  <- y_all[fold_idx == f]
# Weak prior
chain_weak_cv <- run_mcmc(
X_train_cv, y_train_cv,
n_iter      = n_iter_cv,
prop_sd     = 0.01,
prior_fn    = log_prior_weak,
prior_sd    = 5
)
post_weak_cv <- chain_weak_cv[(burn_cv + 1):n_iter_cv, ]
# Predict
pred_mat_weak_cv <- logistic(X_test_cv %*% t(post_weak_cv))
pred_probs_weak_cv <- rowMeans(pred_mat_weak_cv)
# Evaluate AUC
pred_obj_weak_cv <- prediction(pred_probs_weak_cv, y_test_cv)
auc_weak_cv[f] <- performance(pred_obj_weak_cv, "auc")@y.values[[1]]
# Strong prior
chain_strong_cv <- run_mcmc(
X_train_cv, y_train_cv,
n_iter      = n_iter_cv,
prop_sd     = 0.01,
prior_fn    = log_prior_strong,
income_prior_mean  = 2,
income_prior_sd    = 1,
credit_prior_mean  = -2,
credit_prior_sd    = 1,
other_prior_sd     = 5
)
post_strong_cv <- chain_strong_cv[(burn_cv + 1):n_iter_cv, ]
# Predict
pred_mat_strong_cv <- logistic(X_test_cv %*% t(post_strong_cv))
pred_probs_strong_cv <- rowMeans(pred_mat_strong_cv)
# Evaluate AUC
pred_obj_strong_cv <- prediction(pred_probs_strong_cv, y_test_cv)
auc_strong_cv[f] <- performance(pred_obj_strong_cv, "auc")@y.values[[1]]
cat("Fold:", f,
"| Weak AUC =", round(auc_weak_cv[f], 3),
"| Strong AUC =", round(auc_strong_cv[f], 3), "\n")
}
cat("\nMean Weak CV AUC =", round(mean(auc_weak_cv), 3), "\n")
cat("Mean Strong CV AUC =", round(mean(auc_strong_cv), 3), "\n")
mcmc_obj_weak   <- as.mcmc(posterior_samples_weak)
